#!/usr/bin/env perl

use strict;
use warnings;
use autodie qw(:all);
use Data::Dumper;

# CD17/cantbur.pdf
# run pdftotext cantbur.pdf

my %churches = (
	'AND' => 'St Andrew',
	'ALP' => 'St Alphage',
	'BDN' => 'St Mary Bredin',
	'BMN' => 'St Mary Bredman',
	'CHR' => 'Christchurch',
	'DUN' => 'St Dunstan',
	'GEO' => 'St George',
	'GRY' => 'St Gregory',
	'HYX' => 'Holy Cross',
	'MAG' => 'St Mary Magdalene',
	'MIL' => 'St Mildred',
	'MRG' => 'St Margaret',
	'MTN' => 'St Martin',
	'NGT' => 'St Mary Northgate',
	'PTR' => 'St Peter',
	'PAU' => 'St Paul',
	'STS' => 'All Saints',
	'WAL' => 'Walloon Church',
);

open(my $fin, '<', 'cantbur.txt');
my $inheader = 1;
my $mode;
my @data;
my $index = 0;
my $see = 0;
my $save_index = undef;
while (my $line = <$fin>) {
	chomp $line;

	if($line eq 'Name') {
		$inheader = 0;
		$mode = 'name';
		next;
	}
	next if($inheader);
	next if($line =~ /^Page \d.+\d$/);
	next if($line =~ /^/);

	if(length($line) == 0) {
		if($mode eq 'name') {
			$mode = 'date';
		} elsif($mode eq 'date') {
			$mode = 'age';
		} elsif($mode eq 'age') {
			$mode = 'abode';
			$save_index = $index;
		} elsif($mode eq 'abode') {
			$mode = 'church';
		}
		$index = 0;
	} elsif($line =~ /Burial Index/i) {
		$mode = 'name';
		# print Data::Dumper->new([\@data])->Dump();
		while(my $row = shift(@data)) {
			next if($see-- && !defined($row->{'name'}));
			die Data::Dumper->new([$row])->Dump() if(keys %{$row} != 5);
			if(my $church = $churches{$row->{'church'}}) {
				print "burial, ", $row->{'name'}, ', ',
					$row->{'date'}, ', ',
					$row->{'age'}, ', ',
					$row->{'abode'}, ', ',
					"$church\n";
			}
		}
		$index = 0;
	} else {
		if($mode eq 'name') {
			if($line =~ /^[A-Z]+\ssee\s[A-Z]+/) {
				$see++;
				next;
			}
			$see = 0;
		} elsif($mode eq 'date') {
			if($line =~ /^(--.--.---)(--.--.---)(.+)/) {
				$data[$index++]->{'date'} = $1;
				$data[$index++]->{'date'} = $2;
				$data[$index++]->{'date'} = $3;
				next;
			}
			if($line =~ /^(--.--.---.)(.+)/) {
				$data[$index++]->{'date'} = $1;
				$data[$index++]->{'date'} = $2;
				next;
			}
			# $line =~ s/^--\.--\.---//;
		}

		if($line eq 'Name') {
			while(my $row = shift(@data)) {
				die Data::Dumper->new([$row])->Dump() if(scalar keys %{$row} != 5);
				if(my $church = $churches{$row->{'church'}}) {
					print "burial, ", $row->{'name'}, ', ',
						$row->{'date'}, ', ',
						$row->{'age'}, ', ',
						$row->{'abode'}, ', ',
						"$church\n";
				} else {
					die Data::Dumper->new([$row])->Dump();
				}
			}
			$mode = 'name';
			$index = 0;
		} elsif($line eq 'Date') {
			$mode = 'date';
			$index = 0;
		} elsif($line eq 'Age') {
			$mode = 'age';
			$index = 0;
		} elsif($line eq 'Abode') {
			$mode = 'abode';
			$index = 0;
		} elsif($line eq 'Church') {
			$mode = 'church';
			$index = 0;
		} else {
			if($line eq 'Infant') {
				$mode = 'age';
				if(defined($save_index) && defined($data[$save_index - 1]{'age'}) &&
				  ($data[$save_index - 1]{'age'} =~ /^17/)) {
					$index = $save_index;
					$save_index = undef;
				}
			}
			if(($line =~ /^\d\d\.\d\d\.\d\d\d\d$/) && ($mode ne 'date')) {
				# die "$mode: $line";
				warn "$mode: $line";
				$data[$index++]->{'date'} = $line;
			} elsif(($mode eq 'date') && ($line !~ /^[\d\-\.\?\s]+$/)) {
				die "$mode: $line";
			} elsif(($mode eq 'abode') && ($line =~ /^([A-Z\s]+)\-+(.+)$/i)) {
				$data[$index++]->{'abode'} = $1;
				$data[$index++]->{'abode'} = $2;
			} elsif(($mode eq 'abode') && ($line =~ /^(\d+\s[YM])+\s(.+)$/)) {
				$data[$index]->{'age'} = $1;
				$data[$index++]->{'abode'} = $2;
			} elsif(($mode eq 'church') && !defined($churches{$line})) {
				die $line;
			} else {
				$data[$index++]->{$mode} = $line;
				# print "$mode: $line\n";
			}
		}
	}
}

while(my $row = shift(@data)) {
	die Data::Dumper->new([$row])->Dump() if(scalar keys %{$row} != 5);
	if(my $church = $churches{$row->{'church'}}) {
		print "burial, ", $row->{'name'}, ', ',
			$row->{'date'}, ', ',
			$row->{'age'}, ', ',
			$row->{'abode'}, ', ',
			"$church\n";
	} else {
		die Data::Dumper->new([$row])->Dump();
	}
}
